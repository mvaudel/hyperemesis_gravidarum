---
title: "other_phenotypes"
format: gfm
editor: visual
---

## Association to other phenotypes

Study of the association of markers with other phenotypes.

```{r}

library(conflicted)
library(janitor)
library(glue)
library(tidyverse)
library(gamlss.data)
library(gamlss.dist)
library(gamlss)
library(ggplot2)
library(gghalves)
library(scico)
library(ggside)
library(parallel)
library(grid)

# Solve name space conflicts
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(stats::fisher.test)

# General parameters
theme_set(theme_bw(base_size = 14))


# Standardization fuctions
source("standardization_functions.R")
```

Load phenotypes

```{r}

unrelated_mothers <- read.table(
  file = "/mnt/archive/moba/pheno/v12/pheno_anthropometrics_24-01-16/id/mothers_id_unrelated",
  header = T,
  sep = "\t"
)

unrelated_children <- read.table(
  file = "/mnt/archive/moba/pheno/v12/pheno_anthropometrics_24-01-16/id/children_id_unrelated",
  header = T,
  sep = "\t"
)

pregnancy_data <- read.table(
  file = "/mnt/archive/moba/pheno/v12/pheno_anthropometrics_24-01-16/pregnancy.gz",
  header = T,
  sep = "\t"
)

mfr_data <- read.table(
  file = "/mnt/archive/moba/pheno/v12/pheno_anthropometrics_24-01-16/mfr.gz",
  header = T,
  sep = "\t"
)

parents_data <- read.table(
  file = "/mnt/archive/moba/pheno/v12/pheno_anthropometrics_24-01-16/parents.gz",
  header = T,
  sep = "\t"
)

mother_health_data <- read.table(
  file = "/mnt/archive/moba/pheno/v12/pheno_anthropometrics_24-01-16/mother_health.gz",
  header = T,
  sep = "\t"
)

```

Clean parental anthropometrics

```{r}

i <- which(!is.na(parents_data$mother_weight_beginning_self) & parents_data$mother_weight_beginning_self > 200)
parents_data$mother_weight_beginning_self[i] <- parents_data$mother_weight_beginning_self[i] / 10

i <- which(!is.na(parents_data$mother_weight_beginning_self) & parents_data$mother_weight_beginning_self < 25)
parents_data$mother_weight_beginning_self[i] <- NA

i <- which(!is.na(parents_data$mother_weight_beginning_self) & parents_data$mother_weight_beginning_self > 150)
parents_data$mother_weight_beginning_self[i] <- NA

i <- which(!is.na(parents_data$mother_weight_15w) & parents_data$mother_weight_15w > 200)
parents_data$mother_weight_15w[i] <- parents_data$mother_weight_15w[i] / 10

i <- which(!is.na(parents_data$mother_weight_15w) & parents_data$mother_weight_15w < 25)
parents_data$mother_weight_15w[i] <- NA

i <- which(!is.na(parents_data$mother_weight_15w) & parents_data$mother_weight_15w > 150)
parents_data$mother_weight_15w[i] <- NA

i <- which(!is.na(parents_data$mother_weight_end) & parents_data$mother_weight_end > 250)
parents_data$mother_weight_end[i] <- parents_data$mother_weight_end[i] / 10

i <- which(!is.na(parents_data$mother_weight_end) & parents_data$mother_weight_end < 25)
parents_data$mother_weight_end[i] <- NA

i <- which(!is.na(parents_data$mother_height) & parents_data$mother_height < 150 & !is.na(parents_data$mother_median_height) & parents_data$mother_median_height > 150)
parents_data$mother_height[i] <- parents_data$mother_median_height[i]

i <- which(!is.na(parents_data$mother_height) & parents_data$mother_height < 125)
parents_data$mother_height[i] <- NA

parents_data$mother_bmi_beginning <- 10000 * parents_data$mother_weight_beginning_self / parents_data$mother_height ^ 2

parents_data$mother_bmi_beginning_log <- log10(parents_data$mother_bmi_beginning)

parents_data$mother_bmi_15w <- 10000 * parents_data$mother_weight_15w / parents_data$mother_height ^ 2

parents_data$mother_bmi_15w_log <- log10(parents_data$mother_bmi_15w)

parents_data$mother_bmi_end <- 10000 * parents_data$mother_weight_end / parents_data$mother_height ^ 2

parents_data$mother_bmi_end_log <- log10(parents_data$mother_bmi_end)

parents_data$mother_weight_gain_15w <- parents_data$mother_weight_15w -  parents_data$mother_weight_beginning_self

parents_data$mother_weight_gain_15w_relative <- parents_data$mother_weight_gain_15w /  parents_data$mother_weight_beginning_self

parents_data$mother_weight_gain_end <- parents_data$mother_weight_end -  parents_data$mother_weight_beginning_self

parents_data$mother_weight_gain_end_relative <- parents_data$mother_weight_gain_end /  parents_data$mother_weight_beginning_self

```

Process values

```{r}

nvp_data <- pregnancy_data %>% 
  mutate(
    hospitalized_prolonged_nausea_vomiting = ifelse(is.na(hospitalized_prolonged_nausea_vomiting), 0, 1),
    hospitalized_prolonged_nausea_vomiting_0_4w = ifelse(is.na(hospitalized_prolonged_nausea_vomiting_0_4w), 0, 1),
    hospitalized_prolonged_nausea_vomiting_5_8w = ifelse(is.na(hospitalized_prolonged_nausea_vomiting_5_8w), 0, 1),
    hospitalized_prolonged_nausea_vomiting_9_12w = ifelse(is.na(hospitalized_prolonged_nausea_vomiting_9_12w), 0, 1),
    hospitalized_prolonged_nausea_vomiting_13_16w = ifelse(is.na(hospitalized_prolonged_nausea_vomiting_13_16w), 0, 1),
    hospitalized_prolonged_nausea_vomiting_17_20w = ifelse(is.na(hospitalized_prolonged_nausea_vomiting_17_20w), 0, 1),
    hospitalized_prolonged_nausea_vomiting_21_24w = ifelse(is.na(hospitalized_prolonged_nausea_vomiting_21_24w), 0, 1),
    hospitalized_prolonged_nausea_vomiting_25_28w = ifelse(is.na(hospitalized_prolonged_nausea_vomiting_25_28w), 0, 1),
    hospitalized_prolonged_nausea_vomiting_after_29w = ifelse(is.na(hospitalized_prolonged_nausea_vomiting_after_29w), 0, 1)
  ) %>% 
  mutate(
    nausea_q2 = ifelse(!is.na(nausea_q2) & nausea_q2 == "Yes", 1, 0),
    vomiting_q2 = ifelse(!is.na(vomiting_q2) & vomiting_q2 == "Yes", 1, 0),
    nausea_any = ifelse(nausea_q2 == 1 | !is.na(nausea_before_4w) | !is.na(nausea_5w_8w) | !is.na(nausea_9w_12w) | !is.na(nausea_13w_15w) | !is.na(nausea_13w_16w) | !is.na(nausea_17w_20w) | !is.na(nausea_21w_24w) | !is.na(nausea_25w_28w) | !is.na(nausea_after_29w), 1, 0),
    vomiting_any = ifelse(vomiting_q2 == 1 | !is.na(vomiting_before_4w) | !is.na(vomiting_5w_8w) | !is.na(vomiting_9w_12w) | !is.na(vomiting_13w_15w), 1, 0),
    long_term_nausea_vomiting_any = ifelse(!is.na(long_term_nausea_vomiting_13w_16w) | !is.na(long_term_nausea_vomiting_17w_20w) | !is.na(long_term_nausea_vomiting_21w_24w) | !is.na(long_term_nausea_vomiting_25w_28w) | !is.na(long_term_nausea_vomiting_after_29w), 1, 0),
    nausea_vomiting = ifelse(nausea_any == 0 & vomiting_any == 0 & long_term_nausea_vomiting_any == 0, 0, 1),
    nausea_vomiting_hg = hospitalized_prolonged_nausea_vomiting + nausea_vomiting,
    nausea_duration = ifelse(is.na(nausea_week_most_bothered_from_q2) | is.na(nausea_week_most_bothered_to_q2), NA, nausea_week_most_bothered_to_q2 - nausea_week_most_bothered_from_q2),
    vomiting_duration = ifelse(is.na(vomiting_week_from_q2) | is.na(vomiting_week_to_q2), NA, vomiting_week_to_q2 - vomiting_week_from_q2),
    nausea_week_most_bothered_from_q2 = ifelse(!is.na(nausea_duration) & nausea_duration < 0, NA, nausea_week_most_bothered_from_q2),
    nausea_week_most_bothered_to_q2 = ifelse(!is.na(nausea_duration) & nausea_duration < 0, NA, nausea_week_most_bothered_to_q2),
    nausea_duration = ifelse(!is.na(nausea_duration) & nausea_duration < 0, NA, nausea_duration),
    vomiting_week_from_q2 = ifelse(!is.na(vomiting_duration) & vomiting_duration < 0, NA, vomiting_week_from_q2),
    vomiting_week_to_q2 = ifelse(!is.na(vomiting_duration) & vomiting_duration < 0, NA, vomiting_week_to_q2),
    vomiting_duration = ifelse(!is.na(vomiting_duration) & vomiting_duration < 0, NA, vomiting_duration),
    hospitalized_pre_eclampsia = ifelse(!is.na(hospitalized_pre_eclampsia), 1, 0)
  ) %>% 
  select(
    child_id, mother_id, child_sentrix_id, mother_sentrix_id, pregnancy_duration_term, sex, hospitalized_pre_eclampsia, nausea_vomiting, nausea_vomiting_hg, nausea_duration, vomiting_duration
  )

birth_data <- mfr_data %>% 
  filter(
    is.na(plural_birth)
  ) %>% 
  mutate(
    placental_weight = ifelse(placental_weight < 500 | placental_weight > 1000, NA, placental_weight),
    n_previous_stillbirths = ifelse(n_previous_stillbirths == "2 or more", 2, as.numeric(n_previous_stillbirths)),
    n_previous_live_births = ifelse(n_previous_live_births == "4 or more", 4, as.numeric(n_previous_live_births)),
    previous_miscarriages_before_12w = ifelse(previous_miscarriages_before_12w == "4 or more", 4, as.numeric(previous_miscarriages_before_12w)),
    previous_miscarriages_12_23w = ifelse(previous_miscarriages_12_23w == "4 or more", 4, as.numeric(previous_miscarriages_12_23w)),
    previous_miscarriages = previous_miscarriages_before_12w + previous_miscarriages_12_23w,
    abruptio_placentae = ifelse(!is.na(abruptio_placentae), 1, 0),
    placenta_previa = ifelse(!is.na(placenta_previa), 1, 0),
    perinatal_death = ifelse(!is.na(perinatal_death), 1, 0),
    early_preeclampsia = ifelse(!is.na(early_preeclampsia), 1, 0),
    preeclampsia_serious = ifelse(!is.na(preeclampsia) & preeclampsia == "Serious", 1, 0),
    preeclampsia_quant = ifelse(is.na(preeclampsia), "No", preeclampsia),
    preeclampsia_quant = as.numeric(factor(preeclampsia_quant, levels = c("No", "Light", "Unspecified", "Serious"))),
    preeclampsia = ifelse(!is.na(preeclampsia) | !is.na(eclampsia_total), 1, 0),
    pregnancy_hellp = ifelse(!is.na(pregnancy_hellp), 1, 0),
    spontaneous_delivery = ifelse(initiation == "Spontaneous", 1, 0)
  ) %>% 
  select(
    child_id, child_sentrix_id, mother_sentrix_id, pregnancy_duration, n_previous_stillbirths, n_previous_live_births, previous_miscarriages_before_12w, previous_miscarriages_12_23w, previous_miscarriages, abruptio_placentae, placenta_previa, placental_weight, weight_birth, length_birth, hc_birth, perinatal_death, spontaneous_delivery, eclampsia_total, preeclampsia, early_preeclampsia, preeclampsia_serious, preeclampsia_quant, pregnancy_hellp
  )

mother_data <- parents_data %>% 
  select(
    child_id, mother_age_at_menarche, mother_age_15w, mother_height, mother_weight_beginning_self, mother_weight_15w, mother_weight_end, 
    mother_bmi_beginning, mother_bmi_15w, mother_bmi_end, 
    mother_bmi_beginning_log, mother_bmi_15w_log, mother_bmi_end_log, 
    mother_weight_gain_15w, mother_weight_gain_15w_relative, mother_weight_gain_end, mother_weight_gain_end_relative
  )

mother_health_data <- mother_health_data %>% 
  mutate(
    diabetes_before = ifelse(!is.na(diabetes_insulin_before) | !is.na(diabetes_no_insulin_before), 1, 0),
    diabetes_during = ifelse(!is.na(diabetes_insulin_during) | !is.na(diabetes_no_insuling_during), 1, 0),
    diabetes_during_not_before = ifelse(diabetes_during == 1 & diabetes_before == 0, 1, 0),
    diabetes = ifelse(diabetes_during == 1 | diabetes_before == 1, 1, 0)
  ) %>% 
  select(
    child_id, diabetes_before, diabetes_during, diabetes_during_not_before, diabetes
  )

pheno_data_child <- nvp_data %>% 
  left_join(
    birth_data %>% 
    select(
      -child_sentrix_id, -mother_sentrix_id
    ),
  by = "child_id"
  ) %>% 
  left_join(
    mother_data,
    by = "child_id"
  ) %>% 
  left_join(
    mother_health_data,
    by = "child_id"
  ) %>% 
  group_by(mother_id) %>% 
  slice_sample(n = 1)

pheno_child_genotyped_unrelated <- nvp_data %>% 
  filter(
    !is.na(child_sentrix_id) & child_sentrix_id %in% unrelated_children$sentrix_id
  ) %>% 
  left_join(
    birth_data %>% 
  filter(
    !is.na(child_sentrix_id) & child_sentrix_id %in% unrelated_children$sentrix_id
  ) %>% 
    select(
      -mother_sentrix_id, -child_id
    ),
  by = "child_sentrix_id"
  ) %>% 
  left_join(
    mother_data,
    by = "child_id"
  ) %>% 
  left_join(
    mother_health_data,
    by = "child_id"
  )

```

Standardize anthropometric values

```{r}
#| output: false

phenotypes <- c("placental_weight", "weight_birth")

dependentPhenoName <- "pregnancy_duration"

pheno_child_genotyped_unrelated$dummy <- 0

for (phenotype in phenotypes) {
  
  print(paste0(Sys.time(), "    Standardizing ", phenotype))
  
  z_phenotype <- paste0("z_", phenotype, "_", dependentPhenoName)
  
  sigmaFormula <- paste0(" ~ fp(", dependentPhenoName, ")")
  sigmaFormulaLinear <- paste0(" ~ ", dependentPhenoName)
  
  formula <- paste0(phenotype, sigmaFormula)
  formulaLinear <- paste0(phenotype, sigmaFormulaLinear)
  
  family <- BCT
  
  zDF <- standardizeBySex(
    trainingPhenoDF = pheno_child_genotyped_unrelated,
    phenoDF = pheno_child_genotyped_unrelated,
    id = "child_sentrix_id",
    x = dependentPhenoName,
    y = phenotype,
    zY = z_phenotype,
    formula = as.formula(formula),
    sigmaFormula = as.formula(sigmaFormula),
    formula2 = as.formula(formulaLinear),
    sigmaFormula2 = as.formula(sigmaFormulaLinear),
    family = family
  )
  
  pheno_child_genotyped_unrelated <- pheno_child_genotyped_unrelated %>% 
    left_join(
      zDF,
      by = "child_sentrix_id"
    )
  
  zDF <- standardizeBySex(
    trainingPhenoDF = pheno_child_genotyped_unrelated,
    phenoDF = pheno_data_child,
    id = "child_id",
    x = dependentPhenoName,
    y = phenotype,
    zY = z_phenotype,
    formula = as.formula(formula),
    sigmaFormula = as.formula(sigmaFormula),
    formula2 = as.formula(formulaLinear),
    sigmaFormula2 = as.formula(sigmaFormulaLinear),
    family = family
  )
  
  pheno_data_child <- pheno_data_child %>% 
    left_join(
      zDF,
      by = "child_id"
    )
  
  plot <- ggplot(
    data = pheno_child_genotyped_unrelated
  ) +
    geom_point(
      mapping = aes(
        x = !!sym(phenotype),
        y = !!sym(z_phenotype),
        col = factor(sex)
      )
    )
  
  png(
    filename = glue("plots/{phenotype}_{dependentPhenoName}.png"),
    width = 600,
    height = 600
  )
  grid.draw(plot)
  device <- dev.off()
  
  z_phenotype <- paste0("z_", phenotype)
  
  sigmaFormula <- paste0(" ~ dummy")
  
  formula <- paste0(phenotype, sigmaFormula)
  
  family <- BCT
  
  zDF <- standardizeBySex(
    trainingPhenoDF = pheno_child_genotyped_unrelated,
    phenoDF = pheno_child_genotyped_unrelated,
    id = "child_sentrix_id",
    x = "dummy",
    y = phenotype,
    zY = z_phenotype,
    formula = as.formula(formula),
    sigmaFormula = as.formula(sigmaFormula),
    formula2 = as.formula(formula),
    sigmaFormula2 = as.formula(sigmaFormula),
    family = family
  )
  
  pheno_child_genotyped_unrelated <- pheno_child_genotyped_unrelated %>% 
    left_join(
      zDF,
      by = "child_sentrix_id"
    )
  
  family <- BCT
  
  zDF <- standardizeBySex(
    trainingPhenoDF = pheno_child_genotyped_unrelated,
    phenoDF = pheno_data_child,
    id = "child_id",
    x = "dummy",
    y = phenotype,
    zY = z_phenotype,
    formula = as.formula(formula),
    sigmaFormula = as.formula(sigmaFormula),
    formula2 = as.formula(formula),
    sigmaFormula2 = as.formula(sigmaFormula),
    family = family
  )
  
  pheno_data_child <- pheno_data_child %>% 
    left_join(
      zDF,
      by = "child_id"
    )
  
  plot <- ggplot(
    data = pheno_child_genotyped_unrelated
  ) +
    geom_point(
      mapping = aes(
        x = !!sym(phenotype),
        y = !!sym(z_phenotype),
        col = factor(sex)
      )
    )
  
  png(
    filename = glue("plots/{phenotype}.png"),
    width = 600,
    height = 600
  )
  grid.draw(plot)
  device <- dev.off()
  
}

phenotypes <- c("hc_birth")

dependentPhenoName <- "length_birth"

pheno_child_genotyped_unrelated$dummy <- 0

for (phenotype in phenotypes) {
  
  print(paste0(Sys.time(), "    Standardizing ", phenotype))
  
  z_phenotype <- paste0("z_", phenotype, "_", dependentPhenoName)
  
  sigmaFormula <- paste0(" ~ fp(", dependentPhenoName, ")")
  sigmaFormulaLinear <- paste0(" ~ ", dependentPhenoName)
  
  formula <- paste0(phenotype, sigmaFormula)
  formulaLinear <- paste0(phenotype, sigmaFormulaLinear)
  
  family <- BCT
  
  zDF <- standardizeBySex(
    trainingPhenoDF = pheno_child_genotyped_unrelated,
    phenoDF = pheno_child_genotyped_unrelated,
    id = "child_sentrix_id",
    x = dependentPhenoName,
    y = phenotype,
    zY = z_phenotype,
    formula = as.formula(formula),
    sigmaFormula = as.formula(sigmaFormula),
    formula2 = as.formula(formulaLinear),
    sigmaFormula2 = as.formula(sigmaFormulaLinear),
    family = family
  )
  
  pheno_child_genotyped_unrelated <- pheno_child_genotyped_unrelated %>% 
    left_join(
      zDF,
      by = "child_sentrix_id"
    )
  
  zDF <- standardizeBySex(
    trainingPhenoDF = pheno_child_genotyped_unrelated,
    phenoDF = pheno_data_child,
    id = "child_id",
    x = dependentPhenoName,
    y = phenotype,
    zY = z_phenotype,
    formula = as.formula(formula),
    sigmaFormula = as.formula(sigmaFormula),
    formula2 = as.formula(formulaLinear),
    sigmaFormula2 = as.formula(sigmaFormulaLinear),
    family = family
  )
  
  pheno_data_child <- pheno_data_child %>% 
    left_join(
      zDF,
      by = "child_id"
    )
  
  plot <- ggplot(
    data = pheno_child_genotyped_unrelated
  ) +
    geom_point(
      mapping = aes(
        x = !!sym(phenotype),
        y = !!sym(z_phenotype),
        col = factor(sex)
      )
    )
  
  png(
    filename = glue("plots/{phenotype}_{dependentPhenoName}.png"),
    width = 600,
    height = 600
  )
  grid.draw(plot)
  device <- dev.off()
  
  z_phenotype <- paste0("z_", phenotype)
  
  sigmaFormula <- paste0(" ~ dummy")
  
  formula <- paste0(phenotype, sigmaFormula)
  
  family <- BCT
  
  zDF <- standardizeBySex(
    trainingPhenoDF = pheno_child_genotyped_unrelated,
    phenoDF = pheno_child_genotyped_unrelated,
    id = "child_sentrix_id",
    x = "dummy",
    y = phenotype,
    zY = z_phenotype,
    formula = as.formula(formula),
    sigmaFormula = as.formula(sigmaFormula),
    formula2 = as.formula(formula),
    sigmaFormula2 = as.formula(sigmaFormula),
    family = family
  )
  
  pheno_child_genotyped_unrelated <- pheno_child_genotyped_unrelated %>% 
    left_join(
      zDF,
      by = "child_sentrix_id"
    )
  
  zDF <- standardizeBySex(
    trainingPhenoDF = pheno_child_genotyped_unrelated,
    phenoDF = pheno_data_child,
    id = "child_id",
    x = "dummy",
    y = phenotype,
    zY = z_phenotype,
    formula = as.formula(formula),
    sigmaFormula = as.formula(sigmaFormula),
    formula2 = as.formula(formula),
    sigmaFormula2 = as.formula(sigmaFormula),
    family = family
  )
  
  pheno_data_child <- pheno_data_child %>% 
    left_join(
      zDF,
      by = "child_id"
    )
  
  plot <- ggplot(
    data = pheno_child_genotyped_unrelated
  ) +
    geom_point(
      mapping = aes(
        x = !!sym(phenotype),
        y = !!sym(z_phenotype),
        col = factor(sex)
      )
    )
  
  png(
    filename = glue("plots/{phenotype}.png"),
    width = 600,
    height = 600
  )
  grid.draw(plot)
  device <- dev.off()
  
}

phenotypes <- c("hc_birth", "placental_weight")

dependentPhenoName <- "weight_birth"

pheno_child_genotyped_unrelated$dummy <- 0

for (phenotype in phenotypes) {
  
  print(paste0(Sys.time(), "    Standardizing ", phenotype))
  
  z_phenotype <- paste0("z_", phenotype, "_", dependentPhenoName)
  
  sigmaFormula <- paste0(" ~ fp(", dependentPhenoName, ")")
  sigmaFormulaLinear <- paste0(" ~ ", dependentPhenoName)
  
  formula <- paste0(phenotype, sigmaFormula)
  formulaLinear <- paste0(phenotype, sigmaFormulaLinear)
  
  family <- BCT
  
  zDF <- standardizeBySex(
    trainingPhenoDF = pheno_child_genotyped_unrelated,
    phenoDF = pheno_child_genotyped_unrelated,
    id = "child_sentrix_id",
    x = dependentPhenoName,
    y = phenotype,
    zY = z_phenotype,
    formula = as.formula(formula),
    sigmaFormula = as.formula(sigmaFormula),
    formula2 = as.formula(formulaLinear),
    sigmaFormula2 = as.formula(sigmaFormulaLinear),
    family = family
  )
  
  pheno_child_genotyped_unrelated <- pheno_child_genotyped_unrelated %>% 
    left_join(
      zDF,
      by = "child_sentrix_id"
    )
  
  zDF <- standardizeBySex(
    trainingPhenoDF = pheno_child_genotyped_unrelated,
    phenoDF = pheno_data_child,
    id = "child_id",
    x = dependentPhenoName,
    y = phenotype,
    zY = z_phenotype,
    formula = as.formula(formula),
    sigmaFormula = as.formula(sigmaFormula),
    formula2 = as.formula(formulaLinear),
    sigmaFormula2 = as.formula(sigmaFormulaLinear),
    family = family
  )
  
  pheno_data_child <- pheno_data_child %>% 
    left_join(
      zDF,
      by = "child_id"
    )
  
  plot <- ggplot(
    data = pheno_child_genotyped_unrelated
  ) +
    geom_point(
      mapping = aes(
        x = !!sym(phenotype),
        y = !!sym(z_phenotype),
        col = factor(sex)
      )
    )
  
  png(
    filename = glue("plots/{phenotype}_{dependentPhenoName}.png"),
    width = 600,
    height = 600
  )
  grid.draw(plot)
  device <- dev.off()
  
}

```

Phenotypic association with NVP/HG

```{r}

binary_phenotypes <- c("perinatal_death", "hospitalized_pre_eclampsia", "early_preeclampsia", "preeclampsia", "preeclampsia_serious")

term_levels = c("<37w", ">=37w", "All")
term_labels = c("before_37w", "after_or_equal_37w", "All")

fisher_results <- list()

for (pheno in binary_phenotypes) {
  
  for (term in 0:2) {
    
    if (term != 2) {
      
      test_data <- pheno_data_child %>% 
        filter(
          pregnancy_duration_term == term & !is.na(!!sym(pheno))
        )
      
    } else {
      
      test_data <- pheno_data_child %>% 
        filter(
          !is.na(!!sym(pheno))
        )
      
    }
    
    n_1_0 <- sum(test_data$nausea_vomiting_hg == 0 & test_data[[pheno]] == 0)
    n_1_1 <- sum(test_data$nausea_vomiting_hg == 0 & test_data[[pheno]] == 1)
    n_2_0 <- sum(test_data$nausea_vomiting_hg == 1 & test_data[[pheno]] == 0)
    n_2_1 <- sum(test_data$nausea_vomiting_hg == 1 & test_data[[pheno]] == 1)
    
    test_results <- fisher.test(
      x = matrix(
        data = c(n_1_0, n_2_0, n_1_1, n_2_1), 
        nrow = 2
      )
    )
    
    test_df <- data.frame(
      pheno = pheno,
      term = term_levels[term + 1],
      category_1 = "No symptom",
      category_2 = "NVP",
      n_1_0 = n_1_0,
      n_1_1 = n_1_1,
      freq_1 = n_1_1 / n_1_0,
      n_2_0 = n_2_0,
      n_2_1 = n_2_1,
      freq_2 = n_2_1 / n_2_0,
      estimate = unname(test_results$estimate),
      confidence_interval_low = test_results$conf.int[1],
      confidence_interval_high = test_results$conf.int[2],
      p_value = test_results$p.value
    )
    
    fisher_results[[length(fisher_results) + 1]] <- test_df
    
    n_1_0 <- sum(test_data$nausea_vomiting_hg != 2 & test_data[[pheno]] == 0)
    n_1_1 <- sum(test_data$nausea_vomiting_hg != 2 & test_data[[pheno]] == 1)
    n_2_0 <- sum(test_data$nausea_vomiting_hg == 2 & test_data[[pheno]] == 0)
    n_2_1 <- sum(test_data$nausea_vomiting_hg == 2 & test_data[[pheno]] == 1)
    
    test_results <- fisher.test(
      x = matrix(
        data = c(n_1_0, n_2_0, n_1_1, n_2_1), 
        nrow = 2
      )
    )
    
    test_df <- data.frame(
      pheno = pheno,
      term = term_levels[term + 1],
      category_1 = "No HG",
      category_2 = "HG",
      n_1_0 = n_1_0,
      n_1_1 = n_1_1,
      freq_1 = n_1_1 / n_1_0,
      n_2_0 = n_2_0,
      n_2_1 = n_2_1,
      freq_2 = n_2_1 / n_2_0,
      estimate = unname(test_results$estimate),
      confidence_interval_low = test_results$conf.int[1],
      confidence_interval_high = test_results$conf.int[2],
      p_value = test_results$p.value
    )
    
    fisher_results[[length(fisher_results) + 1]] <- test_df
    
    n_1_0 <- sum(test_data$nausea_vomiting_hg == 1 & test_data[[pheno]] == 0)
    n_1_1 <- sum(test_data$nausea_vomiting_hg == 1 & test_data[[pheno]] == 1)
    n_2_0 <- sum(test_data$nausea_vomiting_hg == 2 & test_data[[pheno]] == 0)
    n_2_1 <- sum(test_data$nausea_vomiting_hg == 2 & test_data[[pheno]] == 1)
    
    test_results <- fisher.test(
      x = matrix(
        data = c(n_1_0, n_2_0, n_1_1, n_2_1), 
        nrow = 2
      )
    )
    
    test_df <- data.frame(
      pheno = pheno,
      term = term_levels[term + 1],
      category_1 = "NVP",
      category_2 = "HG",
      n_1_0 = n_1_0,
      n_1_1 = n_1_1,
      freq_1 = n_1_1 / n_1_0,
      n_2_0 = n_2_0,
      n_2_1 = n_2_1,
      freq_2 = n_2_1 / n_2_0,
      estimate = unname(test_results$estimate),
      confidence_interval_low = test_results$conf.int[1],
      confidence_interval_high = test_results$conf.int[2],
      p_value = test_results$p.value
    )
    
    fisher_results[[length(fisher_results) + 1]] <- test_df
    
    n_1_0 <- sum(test_data$nausea_vomiting_hg == 0 & test_data[[pheno]] == 0)
    n_1_1 <- sum(test_data$nausea_vomiting_hg == 0 & test_data[[pheno]] == 1)
    n_2_0 <- sum(test_data$nausea_vomiting_hg == 2 & test_data[[pheno]] == 0)
    n_2_1 <- sum(test_data$nausea_vomiting_hg == 2 & test_data[[pheno]] == 1)
    
    test_results <- fisher.test(
      x = matrix(
        data = c(n_1_0, n_2_0, n_1_1, n_2_1), 
        nrow = 2
      )
    )
    
    test_df <- data.frame(
      pheno = pheno,
      term = term_levels[term + 1],
      category_1 = "No symptom",
      category_2 = "HG",
      n_1_0 = n_1_0,
      n_1_1 = n_1_1,
      freq_1 = n_1_1 / n_1_0,
      n_2_0 = n_2_0,
      n_2_1 = n_2_1,
      freq_2 = n_2_1 / n_2_0,
      estimate = unname(test_results$estimate),
      confidence_interval_low = test_results$conf.int[1],
      confidence_interval_high = test_results$conf.int[2],
      p_value = test_results$p.value
    )
    
    fisher_results[[length(fisher_results) + 1]] <- test_df
    
  }
}

fisher_results <- do.call(rbind, fisher_results)

write.table(
  fisher_results,
  file = gzfile("tables/binary_phenotypes_fisher_test.gz"),
  sep = " \t",
  col.names = T,
  row.names = F,
  quote = F
)

numeric_phenotypes <- c("pregnancy_duration", "z_placental_weight_pregnancy_duration", "z_weight_birth_pregnancy_duration", "z_hc_birth", "mother_age_at_menarche", "mother_age_15w", "mother_weight_beginning_self", "mother_weight_15w", "mother_weight_end", "mother_bmi_beginning", "mother_bmi_15w", "mother_bmi_end")

t_results <- list()

for (pheno in numeric_phenotypes) {
  
  for (term in 0:2) {
    
    if (term != 2) {
      
      test_data <- pheno_data_child %>% 
        filter(
          pregnancy_duration_term == term & !is.na(!!sym(pheno))
        )
      
    } else {
      
      test_data <- pheno_data_child %>% 
        filter(
          !is.na(!!sym(pheno))
        )
      
    }
    
    x <- test_data[[pheno]][test_data$nausea_vomiting_hg == 0]
    mean_x <- mean(x)
    sd_x <- sd(x)
    n_x <- length(x)
    
    y <- test_data[[pheno]][test_data$nausea_vomiting_hg == 1]
    mean_y <- mean(y)
    sd_y <- sd(y)
    n_y <- length(y)
    
    test_results <- t.test(
      x = x,
      y = y
    )
    
    test_df <- data.frame(
      pheno = pheno,
      term = term_levels[term + 1],
      category_1 = "No symptom",
      category_2 = "NVP",
      mean_1 = mean_x,
      sd_1 = sd_x,
      n_1 = n_x,
      mean_2 = mean_y,
      sd_2 = sd_y,
      n_2 = n_y,
      p_value = test_results$p.value
    )
    
    t_results[[length(t_results) + 1]] <- test_df
    
    x <- test_data[[pheno]][test_data$nausea_vomiting_hg == 0]
    mean_x <- mean(x)
    sd_x <- sd(x)
    n_x <- length(x)
    
    y <- test_data[[pheno]][test_data$nausea_vomiting_hg == 2]
    mean_y <- mean(y)
    sd_y <- sd(y)
    n_y <- length(y)
    
    test_results <- t.test(
      x = x,
      y = y
    )
    
    test_df <- data.frame(
      pheno = pheno,
      term = term_levels[term + 1],
      category_1 = "No symptom",
      category_2 = "HG",
      mean_1 = mean_x,
      sd_1 = sd_x,
      n_1 = n_x,
      mean_2 = mean_y,
      sd_2 = sd_y,
      n_2 = n_y,
      p_value = test_results$p.value
    )
    
    t_results[[length(t_results) + 1]] <- test_df
    
    x <- test_data[[pheno]][test_data$nausea_vomiting_hg == 1]
    mean_x <- mean(x)
    sd_x <- sd(x)
    n_x <- length(x)
    
    y <- test_data[[pheno]][test_data$nausea_vomiting_hg == 2]
    mean_y <- mean(y)
    sd_y <- sd(y)
    n_y <- length(y)
    
    test_results <- t.test(
      x = x,
      y = y
    )
    
    test_df <- data.frame(
      pheno = pheno,
      term = term_levels[term + 1],
      category_1 = "NVP",
      category_2 = "HG",
      mean_1 = mean_x,
      sd_1 = sd_x,
      n_1 = n_x,
      mean_2 = mean_y,
      sd_2 = sd_y,
      n_2 = n_y,
      p_value = test_results$p.value
    )
    
    t_results[[length(t_results) + 1]] <- test_df
    
    x <- test_data[[pheno]][test_data$nausea_vomiting_hg != 2]
    mean_x <- mean(x)
    sd_x <- sd(x)
    n_x <- length(x)
    
    y <- test_data[[pheno]][test_data$nausea_vomiting_hg == 2]
    mean_y <- mean(y)
    sd_y <- sd(y)
    n_y <- length(y)
    
    test_results <- t.test(
      x = x,
      y = y
    )
    
    test_df <- data.frame(
      pheno = pheno,
      term = term_levels[term + 1],
      category_1 = "No HG",
      category_2 = "HG",
      mean_1 = mean_x,
      sd_1 = sd_x,
      n_1 = n_x,
      mean_2 = mean_y,
      sd_2 = sd_y,
      n_2 = n_y,
      p_value = test_results$p.value
    )
    
    t_results[[length(t_results) + 1]] <- test_df
    
  }
}

t_results <- do.call(rbind, t_results)

write.table(
  t_results,
  file = gzfile("tables/numeric_phenotypes_t_test.gz"),
  sep = " \t",
  col.names = T,
  row.names = F,
  quote = F
)

```

Load genotypes

```{r}

meta_results <- read.table(
  file = "utils/look_up_snps_25.03.26",
  sep = "\t",
  header = T
)  %>% 
  clean_names()

genotypes_mothers <- read.table(
  file = "/mnt/work/marc/hg/variants/mothers_genotypes.raw",
  header = T,
  sep = "\t"
) %>% 
  clean_names() %>% 
  select(
    -fid, -pat, -mat, -sex, -phenotype
  ) %>% 
  pivot_longer(
    cols = -iid,
    names_to = "plink_id",
    values_to = "genotype"
  )

genotypes_children <- read.table(
  file = "/mnt/work/marc/hg/variants/childen_genotypes.raw",
  header = T,
  sep = "\t"
) %>% 
  clean_names() %>% 
  select(
    -fid, -pat, -mat, -sex, -phenotype
  ) %>% 
  pivot_longer(
    cols = -iid,
    names_to = "plink_id",
    values_to = "genotype"
  )

```

Variant association with phenotypes

```{r}

#' Run a linear or logistic regression for the variant at the given position against the given phenotype.
#' 
#' @param plink_id The id of the variant.
#' @param snp_data The data frame containing the genotypes and phenotypes.
#' @return The coefficients of the regression as a data frame.
lm_function <- function(plink_id, snp_data, pheno) {
  
  variant_data <- snp_data[snp_data$plink_id == plink_id & !is.na(snp_data[[pheno]]) & !is.na(snp_data$genotype), ]
  
  n_outcome_values <- length(unique(variant_data[[pheno]]))
  
  if (n_outcome_values < 2) {
    
    coefficients <- data.frame(
      plink_id = plink_id,
      allele_frequency = sum(variant_data$genotype)/(2*sum(!is.na(variant_data$genotype))),
      phenotype = pheno,
      test = NA,
      beta = NA,
      se = NA,
      p = NA,
      n = nrow(variant_data),
      stringsAsFactors = F
    )
    
  } else if (n_outcome_values == 2) {
    
    lm_results <- glm(
      formula = glue("{pheno} ~ genotype"), 
      family = "binomial", 
      data = variant_data
    )
    
    lm_summary <- summary(lm_results)
    
    coefficients <- data.frame(
      plink_id = plink_id,
      allele_frequency = sum(variant_data$genotype)/(2*sum(!is.na(variant_data$genotype))),
      phenotype = pheno,
      test = "binomial",
      beta = lm_summary$coef["genotype", "Estimate"],
      se = lm_summary$coef["genotype", "Std. Error"],
      p = lm_summary$coef["genotype", "Pr(>|z|)"],
      n = nrow(variant_data),
      stringsAsFactors = F
    )
    
  } else {
    
    lm_results <- lm(
      formula = glue("{pheno} ~ genotype"),
      data = variant_data
    )
    
    lm_summary <- summary(lm_results)
    
    coefficients <- data.frame(
      plink_id = plink_id,
      allele_frequency = sum(variant_data$genotype)/(2*sum(!is.na(variant_data$genotype))),
      phenotype = pheno,
      test = "linear",
      beta = lm_summary$coef["genotype", "Estimate"],
      se = lm_summary$coef["genotype", "Std. Error"],
      p = lm_summary$coef["genotype", "Pr(>|t|)"],
      n = nrow(variant_data),
      stringsAsFactors = F
    )
    
  }
  
  return(coefficients)
  
}

phenotypes <- c("nausea_vomiting", "nausea_vomiting_hg", "nausea_duration", "vomiting_duration", "perinatal_death", "hospitalized_pre_eclampsia", "early_preeclampsia", "preeclampsia", "preeclampsia_serious", "pregnancy_duration", "z_placental_weight_pregnancy_duration", "z_weight_birth_pregnancy_duration", "z_hc_birth", "mother_age_at_menarche", "mother_age_15w", "mother_weight_beginning_self", "mother_bmi_beginning", "mother_weight_gain_15w", "mother_weight_gain_end")

lm_coefs_mother <- list()

for (phenotype_i in 1:length(phenotypes)) {
  
  phenotype <- phenotypes[phenotype_i]
  
  print(glue("{Sys.time()} - Association for {phenotype} ({phenotype_i} of {length(phenotypes)})"))
  
  for (term in 0:2) {
    
    if (term != 2) {
      
      genotypes_mothers_phenotypes <- genotypes_mothers %>% 
        inner_join(
          pheno_child_genotyped_unrelated %>% 
            filter(
              pregnancy_duration_term == term & !is.na(mother_sentrix_id)
            ) %>% 
            select(
              iid = mother_sentrix_id,
              !!sym(phenotype)
            ),
          by = "iid"
        )
      
    } else {
      
      genotypes_mothers_phenotypes <- genotypes_mothers %>% 
        inner_join(
          pheno_child_genotyped_unrelated %>% 
            filter(
              !is.na(mother_sentrix_id)
            ) %>% 
            select(
              iid = mother_sentrix_id,
              !!sym(phenotype)
            ),
          by = "iid"
        )
      
    }
    
    variants <- unique(genotypes_mothers$plink_id)
    
    for (variant_i in 1:length(variants)) { 
      
      variant_id <- variants[variant_i]
      
      temp_df <- lm_function(
        plink_id = variant_id,
        snp_data = genotypes_mothers_phenotypes,
        pheno = phenotype
      )
      
      temp_df$pregnancy_term <- term_levels[term + 1]
      
      lm_coefs_mother[[length(lm_coefs_mother) + 1]] <- temp_df
      
    }
  }
}

lm_coefs_mother <- do.call(rbind, lm_coefs_mother)

lm_coefs_mother_merged <- lm_coefs_mother %>% 
   separate(
     plink_id, 
     into = c("id", "allele"), 
     extra = "drop", 
     remove = F
     ) %>% 
  mutate(
    allele = toupper(allele)
  ) %>% 
  inner_join(
    meta_results %>% 
      select(
        id = snp,
        locus,
        allele0 = a0,
        allele1 = a1,
        beta_meta = beta,
        se_meta = se,
        p_meta = p
      ),
    by = "id"
  ) %>% 
  mutate(
    hg_increasing_allele = ifelse(beta_meta >= 0, allele1, allele0),
    beta_aligned = ifelse(allele == hg_increasing_allele, beta, -beta),
    allele_frequency = ifelse(allele == hg_increasing_allele, allele_frequency, 1-allele_frequency)
  )

write.table(
  lm_coefs_mother_merged,
  file = gzfile("tables/top_hits_association_other_phenotypes.gz"),
  sep = " \t",
  col.names = T,
  row.names = F,
  quote = F
)

```

Effect size comparison

```{r}

for (phenotype_i in 1:length(phenotypes)) {
  
  pheno_name <- phenotypes[phenotype_i]
  
  print(glue("{Sys.time()} - Association for {pheno_name} ({phenotype_i} of {length(phenotypes)})"))

plot_data <- lm_coefs_mother_merged %>% 
  filter(
    phenotype == pheno_name
  ) %>% 
  mutate(
    beta_meta_abs = abs(beta_meta)
  )

plot <- ggplot(
  data = plot_data
) +
  geom_hline(
    yintercept = 0
  ) +
  geom_vline(
    xintercept = 0
  ) +
  geom_abline(
    slope = 1,
    intercept = 0,
    linetype = "dotted"
  ) +
  geom_segment(
    mapping = aes(
      x = beta_meta_abs - qnorm(0.975) * se_meta,
      xend = beta_meta_abs + qnorm(0.975) * se_meta,
      y = beta_aligned,
      yend = beta_aligned
    ),
    color = "grey40"
  ) +
  geom_segment(
    mapping = aes(
      x = beta_meta_abs,
      xend = beta_meta_abs,
      y = beta_aligned - qnorm(0.975) * se,
      yend = beta_aligned + qnorm(0.975) * se
    ),
    color = "grey40"
  ) +
  geom_point(
    mapping = aes(
      x = beta_meta_abs,
      y = beta_aligned
    )
  ) +
  scale_x_continuous(
    name = "Meta [beta 95% CI]"
  ) +
  scale_y_continuous(
    name = glue("{pheno_name} in MoBa [beta 95% CI]")
  )
  
  png(
    filename = glue("plots/{phenotype}_moba_vs_meta.png"),
    width = 900,
    height = 600
  )
  grid.draw(plot)
  device <- dev.off()
  
}

```

Risk score per pregnancy

```{r}

score_df <- genotypes_mothers %>% 
   separate(
     plink_id, 
     into = c("id", "allele"), 
     extra = "drop", 
     remove = F
     ) %>% 
  mutate(
    allele = toupper(allele)
  ) %>% 
  left_join(
    meta_results %>% 
      select(
        id = snp, allele_meta = a1, beta
      ) %>% 
      filter(
        !is.na(beta)
      ),
    by = "id"
  ) %>% 
  mutate(
    beta_swapped = ifelse(allele != allele_meta, -beta, beta)
  ) %>% 
  select(
    mother_sentrix_id = iid, genotype, beta_swapped
    ) %>% 
  filter(
    !is.na(genotype) & !is.na(beta_swapped)
  ) %>% 
  group_by(
    mother_sentrix_id
    ) %>% 
  summarise(
    meta_score = sum(beta_swapped * genotype)
  )

mean_score <- mean(score_df$meta_score, na.rm = T)
sd_score <- sd(score_df$meta_score, na.rm = T)

score_df$meta_score <- score_df$meta_score - mean_score
score_df$meta_score <- score_df$meta_score / sd_score
  
ggplot() +
  geom_density(
    data = score_df,
    mapping = aes(
      x = meta_score
    ),
    fill = "grey80"
  )

```

Phenotype association with PRS

```{r}

#' Run a linear or logistic regression with the risk score against the given phenotype.
#' 
#' @param plink_id The id of the variant.
#' @param snp_data The data frame containing the genotypes and phenotypes.
#' 
#' @return The coefficients of the regression as a data frame.
lm_function <- function(snp_data, pheno) {
  
  model_data <- snp_data[!is.na(snp_data[[pheno]]), ]
  
  n_outcome_values <- length(unique(model_data[[pheno]]))
  
  if (n_outcome_values < 2) {
    
    coefficients <- data.frame(
      phenotype = pheno,
      beta = NA,
      se = NA,
      p = NA,
      n = nrow(model_data),
      stringsAsFactors = F
    )
    
  } else if (n_outcome_values == 2) {
    
    lm_results <- glm(
      formula = glue("{pheno} ~ meta_score"), 
      family = "binomial", 
      data = model_data
    )
    
    lm_summary <- summary(lm_results)
    
    coefficients <- data.frame(
      phenotype = pheno,
      beta = lm_summary$coef["meta_score", "Estimate"],
      se = lm_summary$coef["meta_score", "Std. Error"],
      p = lm_summary$coef["meta_score", "Pr(>|z|)"],
      n = nrow(model_data),
      stringsAsFactors = F
    )
    
  } else {
    
    lm_results <- lm(
      formula = glue("{pheno} ~ meta_score"),
      data = model_data
    )
    
    lm_summary <- summary(lm_results)
    
    coefficients <- data.frame(
      phenotype = pheno,
      beta = lm_summary$coef["meta_score", "Estimate"],
      se = lm_summary$coef["meta_score", "Std. Error"],
      p = lm_summary$coef["meta_score", "Pr(>|t|)"],
      n = nrow(model_data),
      stringsAsFactors = F
    )
    
  }
  
  return(coefficients)
  
}

phenotype_score_df <- score_df %>%
  inner_join(
    pheno_data_child %>% 
      filter(
        !is.na(mother_sentrix_id)
      ),
    by = "mother_sentrix_id"
  )

lm_score_coefs_mother <- list()

for (phenotype_i in 1:length(phenotypes)) {
  
  print(glue("{Sys.time()} - Association for {pheno_name} ({phenotype_i} of {length(phenotypes)})"))
  
  for (hg in 0:1) {
    
    for (pregnancy_duration_i in 0:2) {
  
  pheno_name <- phenotypes[phenotype_i]
  
  model_df <- phenotype_score_df
  
  if (hg == 0) {
    
    model_df <- model_df %>% 
      filter(
        nausea_vomiting_hg != 2
      )
    
    hg_label <- "No HG"
    
  } else {
    
    hg_label <- "All"
    
  }
  
  if (pregnancy_duration_i == 0) {
    
    model_df <- model_df %>% 
      filter(
        pregnancy_duration_term == 0
      )
    
  } else if (pregnancy_duration_i == 1) {
    
    model_df <- model_df %>% 
      filter(
        pregnancy_duration_term == 1
      )
    
  }
  
  term_level <- term_levels[pregnancy_duration_i + 1]
  
  temp_df <- lm_function(snp_data = model_df, pheno = pheno_name)
  temp_df$hg <- hg_label
  temp_df$pregnancy_duration <- term_level
  
  lm_score_coefs_mother[[length(lm_score_coefs_mother) + 1]] <- temp_df
  
  max_y <- max(phenotype_score_df[[pheno_name]], na.rm = T)
  
  plot <- ggplot(
    data = phenotype_score_df
  ) +
    geom_point(
      mapping = aes(
        x = meta_score,
        y = !!sym(pheno_name)
      ),
      alpha = 0.2
    ) +
    geom_smooth(
      mapping = aes(
        x = meta_score,
        y = !!sym(pheno_name)
      ),
      method = "lm"
    ) +
    geom_text(
      mapping = aes(
        x = 1.25,
        y = max_y,
        label = glue("p = {formatC(temp_df$p[1], format = 'e', digits = 2)}")
      ),
      col = "blue3",
      vjust = 1,
      hjust = 1
    )
  
  term_label <- term_labels[pregnancy_duration_i + 1]
  
  png(
    filename = glue("plots/{phenotype}_{hg_label}_{term_label}_prs.png"),
    width = 900,
    height = 600
  )
  grid.draw(plot)
  device <- dev.off()
  
  }
  }
}

lm_score_coefs_mother <- do.call(rbind, lm_score_coefs_mother)

write.table(
  lm_score_coefs_mother,
  file = gzfile("tables/score_association_other_phenotypes.gz"),
  sep = " \t",
  col.names = T,
  row.names = F
)


```
